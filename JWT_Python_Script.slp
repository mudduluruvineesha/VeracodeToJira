{
    "class_id": "com-snaplogic-pipeline",
    "class_version": 9,
    "link_map": {
        "link106": {
            "dst_id": "11111111-1111-1111-1111-000000000002",
            "dst_view_id": "input0",
            "src_id": "11111111-1111-1111-1111-000000000001",
            "src_view_id": "output0"
        },
        "link107": {
            "dst_id": "11111111-1111-1111-1111-000000000001",
            "dst_view_id": "input0",
            "src_id": "11111111-1111-1111-1111-000000000000",
            "src_view_id": "output0"
        }
    },
    "property_map": {
        "error": {
            "11111111-1111-1111-1111-000000000002_error0": {
                "label": {
                    "value": "REST Get - error0"
                },
                "view_type": {
                    "value": "document"
                }
            },
            "error_behavior": {
                "value": "none"
            }
        },
        "info": {
            "author": {
                "value": "skatpally@snaplogic.com"
            },
            "label": {},
            "notes": {
                "value": null
            },
            "pipeline_doc_uri": {
                "value": null
            },
            "purpose": {
                "value": null
            }
        },
        "input": {},
        "output": {
            "11111111-1111-1111-1111-000000000002_output0": {
                "label": {
                    "value": "REST Get - output0"
                },
                "view_type": {
                    "value": "document"
                }
            }
        },
        "settings": {
            "error_param_table": {
                "value": []
            },
            "error_pipeline": {
                "expression": false,
                "value": null
            },
            "imports": {
                "value": []
            },
            "param_table": {
                "value": []
            }
        }
    },
    "render_map": {
        "default_snaplex": null,
        "detail_map": {
            "11111111-1111-1111-1111-000000000000": {
                "error": {},
                "grid_x_int": 2,
                "grid_y_int": 2,
                "index": null,
                "input": {},
                "output": {},
                "recommendation_id": null,
                "rot_int": 0,
                "rot_tail_int": 0,
                "source": ""
            },
            "11111111-1111-1111-1111-000000000001": {
                "error": {},
                "grid_x_int": 3,
                "grid_y_int": 2,
                "index": null,
                "input": {},
                "output": {},
                "recommendation_id": null,
                "rot_int": 0,
                "rot_tail_int": 0,
                "source": ""
            },
            "11111111-1111-1111-1111-000000000002": {
                "error": {
                    "error0": {
                        "dx_int": 0,
                        "dy_int": -1,
                        "rot_int": 0
                    }
                },
                "grid_x_int": 4,
                "grid_y_int": 2,
                "index": null,
                "input": {},
                "output": {},
                "recommendation_id": null,
                "rot_int": 0,
                "rot_tail_int": 0,
                "source": ""
            }
        },
        "pan_x_num": 0,
        "pan_y_num": 0,
        "scale_ratio": 1
    },
    "snap_map": {
        "11111111-1111-1111-1111-000000000000": {
            "class_id": "com-snaplogic-snaps-transform-jsongenerator",
            "class_version": 2,
            "instance_id": "11111111-1111-1111-1111-000000000000",
            "property_map": {
                "error": {
                    "error0": {
                        "label": {
                            "value": "error0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    },
                    "error_behavior": {
                        "value": "fail"
                    }
                },
                "info": {
                    "label": {
                        "value": "Bloomberg App Settings"
                    },
                    "notes": {}
                },
                "input": {},
                "output": {
                    "output0": {
                        "label": {
                            "value": "output0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    }
                },
                "settings": {
                    "arrayElementsAsDocuments": {
                        "value": true
                    },
                    "editable_content": {
                        "value": "## Enter your JSON-encoded data in this space.  Note that this text is\n## treated as an Apache Velocity template, so you can substitute values\n## from input documents or the pipeline parameters.  See the following\n## URL for more information about Velocity:\n##   https://velocity.apache.org/engine/devel/user-guide.html\n\n[\n{\n    \"iss\": \"5d08efa49152f3248478808de2faff84\",\n    \"secret\": \"cd856a551e5b4db55e29bd3e9a74d07c098e273d9d9f16a38816271825cd7d83\",\n    \"method\": \"GET\",\n    \"path\": \"https://api.bloomberg.com/eap/catalogs/\",\n    \"host\": \"api.bloomberg.com\",\n    \"region\": \"default\"\n}\n]\n\n## Tips:\n##  * The sample data above will generate a single empty document, uncomment\n##    the line in the middle to include the sample fields.  Adding more\n##    objects to the root array will cause the snap to generate more\n##    than one document.\n##  * Pipeline parameters can be referenced by prefixing the parameter\n##    name with an underscore, like so:\n##      ${_pipelineParamName}\n##  * If you add an input view to the snap, this template will be\n##    evaluated for each input document.\n##  * Fields in the input documents can be referenced by prefixing them\n##    with a dollar-sign ($), like so:\n##      $parent.child[0].value\n##  * Any referenced document values and pipeline parameters will\n##    automatically be JSON-encoded when they are inserted into the final\n##    JSON document.  You should not have to worry about escaping values\n##    yourself.\n##  * If you are having troubles getting a template to produce valid JSON,\n##    you can add an error view to the snap to get a document that\n##    contains the output of the template evaluation.\n"
                    },
                    "execution_mode": {
                        "value": "Validate & Execute"
                    },
                    "passThroughProp": {
                        "value": true
                    },
                    "supportTypeExts": {
                        "value": false
                    }
                },
                "view_serial": 100
            }
        },
        "11111111-1111-1111-1111-000000000001": {
            "class_id": "com-snaplogic-snaps-script-script",
            "class_version": 2,
            "instance_id": "11111111-1111-1111-1111-000000000001",
            "property_map": {
                "error": {
                    "error0": {
                        "label": {
                            "value": "error0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    },
                    "error_behavior": {
                        "value": "fail"
                    }
                },
                "info": {
                    "label": {
                        "value": "Script"
                    },
                    "notes": {}
                },
                "input": {
                    "input0": {
                        "label": {
                            "value": "input0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    }
                },
                "output": {
                    "output0": {
                        "label": {
                            "value": "output0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    }
                },
                "settings": {
                    "connTimeout": {
                        "value": 30
                    },
                    "editable_content": {
                        "value": "# Import the interface required by the Script snap.\nimport sys\nimport time \nimport datetime\nimport base64\nfrom email import Encoders\nimport binascii\n\n\n\nfrom com.snaplogic.scripting.language import ScriptHook\nsys.path.append('C:/opt/snaplogic/ext-lib/jjwt-api-0.11.2.jar')\nsys.path.append('C:/opt/snaplogic/ext-lib/jjwt-impl-0.11.2.jar')\nsys.path.append('C:/opt/snaplogic/ext-lib/jjwt-jackson-0.11.2.jar')\nfrom io.jsonwebtoken import Jwts\nfrom io.jsonwebtoken.security import Keys\nfrom io.jsonwebtoken import SignatureAlgorithm\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            try:\n                # Read the next input document, store it in a new dictionary, and write this as an output document.\n                inDoc = self.input.next()\n                key = Keys.secretKeyFor(SignatureAlgorithm.HS256);\n                current_time = int(time.time())\n                exp = current_time + 1000\n                nbf = current_time - 60\n                iat = current_time - 60\n                secret=inDoc['secret']\n                my_secret=base64.b64encode(binascii.unhexlify(secret))\n                jwtToken = Jwts.builder().setIssuer(\"5d08efa49152f3248478808de2faff84\").claim('exp',exp).claim('nbf',nbf).claim('iat',iat).claim('region','default').claim('method','GET').claim('path','/eap/catalogs/bbg/').claim('host','api.bloomberg.com').setHeaderParam('typ','JWT').signWith(SignatureAlgorithm.HS256,my_secret).compact();\n                outDoc = {\n                    'access_token' : jwtToken\n                }\n                self.output.write(inDoc, outDoc)\n            except Exception as e:\n                errDoc = {\n                    'error' : str(e)\n                }\n                self.log.error(\"Error in python script\")\n                self.error.write(errDoc)\n\n        self.log.info(\"Script executed\")\n\n    # The \"cleanup()\" method is called after the snap has exited the execute() method\n    def cleanup(self):\n        self.log.info(\"Cleaning up\")\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)\n"
                    },
                    "executable_during_suggest": {
                        "value": false
                    },
                    "execution_mode": {
                        "value": "Validate & Execute"
                    },
                    "followRedirects": {
                        "value": true
                    },
                    "hasNext": {
                        "expression": true,
                        "value": null
                    },
                    "header": {
                        "value": []
                    },
                    "language": {
                        "value": "Python"
                    },
                    "nextUrl": {
                        "expression": true,
                        "value": null
                    },
                    "normalizeUri": {
                        "value": true
                    },
                    "paginationInterval": {
                        "value": 0
                    },
                    "processArray": {
                        "value": false
                    },
                    "queryParams": {
                        "value": []
                    },
                    "responseEntityType": {
                        "value": "DEFAULT"
                    },
                    "retry": {
                        "value": 5
                    },
                    "retryInterval": {
                        "value": 3
                    },
                    "retryPolicy": {
                        "value": "Connection errors"
                    },
                    "script": {
                        "expression": false,
                        "value": null
                    },
                    "serviceUrl": {
                        "expression": false,
                        "value": null
                    },
                    "showAllHeaders": {
                        "value": false
                    },
                    "timeout": {
                        "value": 900
                    },
                    "trustAllCerts": {
                        "value": false
                    }
                },
                "view_serial": 100
            }
        },
        "11111111-1111-1111-1111-000000000002": {
            "class_id": "com-snaplogic-snaps-rest-get",
            "class_version": 2,
            "instance_id": "11111111-1111-1111-1111-000000000002",
            "property_map": {
                "account": {
                    "account_ref": {
                        "expression": false,
                        "value": {}
                    }
                },
                "error": {
                    "error0": {
                        "label": {
                            "value": "error0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    },
                    "error_behavior": {
                        "value": "continue"
                    }
                },
                "info": {
                    "label": {
                        "value": "REST Get"
                    },
                    "notes": {
                        "value": ""
                    }
                },
                "input": {
                    "input0": {
                        "label": {
                            "value": "input0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    }
                },
                "output": {
                    "output0": {
                        "label": {
                            "value": "output0"
                        },
                        "view_type": {
                            "value": "document"
                        }
                    }
                },
                "settings": {
                    "connTimeout": {
                        "value": 30
                    },
                    "executeDuringPreview": {
                        "value": true
                    },
                    "execution_mode": {
                        "value": "Validate & Execute"
                    },
                    "followRedirects": {
                        "value": true
                    },
                    "hasNext": {
                        "expression": true,
                        "value": null
                    },
                    "header": {
                        "value": [
                            {
                                "headerKey": {
                                    "expression": false,
                                    "value": "Content-Type"
                                },
                                "headerValue": {
                                    "expression": false,
                                    "value": "application/json"
                                }
                            },
                            {
                                "headerKey": {
                                    "expression": false,
                                    "value": "jwt"
                                },
                                "headerValue": {
                                    "expression": true,
                                    "value": "$access_token"
                                }
                            },
                            {
                                "headerKey": {
                                    "expression": false,
                                    "value": "api-version"
                                },
                                "headerValue": {
                                    "expression": false,
                                    "value": "2"
                                }
                            }
                        ]
                    },
                    "nextUrl": {
                        "expression": true,
                        "value": null
                    },
                    "normalizeUri": {
                        "value": false
                    },
                    "paginationInterval": {
                        "value": 0
                    },
                    "processArray": {
                        "value": false
                    },
                    "queryParams": {
                        "value": []
                    },
                    "rawData": {
                        "value": false
                    },
                    "responseEntityType": {
                        "value": "DEFAULT"
                    },
                    "retry": {
                        "value": 5
                    },
                    "retryInterval": {
                        "value": 3
                    },
                    "retryPolicy": {
                        "value": "Connection errors"
                    },
                    "serviceUrl": {
                        "expression": false,
                        "value": "https://api.bloomberg.com/eap/catalogs/bbg/"
                    },
                    "showAllHeaders": {
                        "value": false
                    },
                    "timeout": {
                        "value": 900
                    },
                    "trustAllCerts": {
                        "value": true
                    }
                },
                "view_serial": 100
            }
        }
    }
}
